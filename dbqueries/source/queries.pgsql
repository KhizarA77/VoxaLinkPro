CREATE TABLE WALLETS (
    WALLET_ADDRESS TEXT PRIMARY KEY,
    last_usage_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usage_count INT default 0,
    refresh_token text
);

CREATE TABLE TRANSCRIPTIONS(
    TRANSCRIPTION_ID TEXT PRIMARY KEY,
    WALLET_ADDRESS TEXT NOT NULL,
    TRANSCRIBED_FILE_NAME TEXT UNIQUE NOT NULL,
    TRANSCRIPTION_TIME TIMESTAMP,
    CONSTRAINT wfkey FOREIGN KEY (WALLET_ADDRESS) REFERENCES WALLETS(WALLET_ADDRESS)
);

CREATE TABLE SUPPORT_REQUESTS (
    REQUEST_ID TEXT PRIMARY KEY,
    WALLET_ADDRESS TEXT NOT NULL,
    email TEXT NOT NULL,
    REQUEST_TIME TIMESTAMP NOT NULL,
    REQUEST_TEXT TEXT NOT NULL,
    CONSTRAINT wfkey FOREIGN KEY (WALLET_ADDRESS) REFERENCES WALLETS(WALLET_ADDRESS)
);

CREATE SEQUENCE transcription_id_seq START 10000;
CREATE SEQUENCE request_id_seq START 10001;

DROP SEQUENCE transcription_id_seq;
DROP SEQUENCE request_id_seq;

CREATE OR REPLACE FUNCTION generate_transcription_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.TRANSCRIPTION_ID := 'TR' || nextval('transcription_id_seq');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_generate_transcription_id
BEFORE INSERT ON TRANSCRIPTIONS
FOR EACH ROW EXECUTE FUNCTION generate_transcription_id();

CREATE OR REPLACE FUNCTION generate_request_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.REQUEST_ID := 'RQ' || nextval('request_id_seq');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_generate_request_id
BEFORE INSERT ON SUPPORT_REQUESTS
FOR EACH ROW EXECUTE FUNCTION generate_request_id();


INSERT INTO TRANSCRIPTIONS (WALLET_ADDRESS, TRANSCRIBED_FILE_NAME, TRANSCRIPTION_TIME)
VALUES ('54353545353', 'file1.txt', CURRENT_TIMESTAMP);

INSERT INTO SUPPORT_REQUESTS (WALLET_ADDRESS, email, REQUEST_TIME, REQUEST_TEXT)
VALUES ('54353545353', 'test@example.com', CURRENT_TIMESTAMP, 'Sample request');



DROP TABLE TRANSCRIPTIONS;


DROP TABLE SUPPORT_REQUESTS;

DROP TABLE WALLETS;


SELECT * FROM WALLETS;

SELECT * FROM SUPPORT_REQUESTS;

SELECT * FROM TRANSCRIPTIONS;

SELECT * FROM SUMMARIES;